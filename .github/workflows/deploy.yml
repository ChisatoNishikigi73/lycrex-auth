name: 自动部署与服务控制

# 设置权限
permissions:
  contents: read
  packages: read

on:
  push:
    branches: [ main, master ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-22.04
    environment: server-hk0
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
      with:
        submodules: false
        
    - name: 配置Git凭据并检出子模块
      env:
        GH_PAT: ${{ secrets.GH_PAT }}
      run: |
        git config --global url."https://${GH_PAT}@github.com/".insteadOf "https://github.com/"
        
        if [ -f ".gitmodules" ]; then
          git submodule sync
          git submodule update --init --recursive
          git submodule status
        else
          echo "没有发现子模块配置，跳过子模块处理"
        fi
    
    - name: 创建CentOS 7构建环境
      run: |
        cat > Dockerfile.build << EOF
        FROM centos:7
        
        # 修复镜像源
        RUN cd /etc/yum.repos.d/ && \
            sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-* && \
            sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*
        
        # 安装依赖
        RUN yum install -y epel-release && \
            yum clean all && yum makecache && \
            yum -y install gcc gcc-c++ make wget git openssl-devel postgresql-devel \
            ca-certificates curl redhat-rpm-config sudo
        
        # 安装Rust
        RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        ENV PATH="/root/.cargo/bin:${PATH}"
        
        WORKDIR /app
        COPY . .
        
        # 创建Cargo配置
        RUN mkdir -p /root/.cargo && \
            echo '[profile.release]' > /root/.cargo/config && \
            echo 'lto = true' >> /root/.cargo/config && \
            echo 'opt-level = "z"' >> /root/.cargo/config && \
            echo 'codegen-units = 1' >> /root/.cargo/config
        
        CMD cd /app && cargo build --release
        EOF
    
    - name: 构建Docker镜像
      run: docker build -t centos7-rust-builder -f Dockerfile.build .
    
    - name: 构建应用
      run: |
        docker run --rm -v $(pwd):/app centos7-rust-builder
        
        if [ -f "target/release/lycrex-auth" ]; then
          echo "PKG_NAME=lycrex-auth" >> $GITHUB_ENV
          file target/release/lycrex-auth
        else
          EXECUTABLE=$(find target -type f -executable -name "lycrex-auth" | head -n 1)
          if [ -n "$EXECUTABLE" ]; then
            mkdir -p target/release/
            cp "$EXECUTABLE" "target/release/lycrex-auth"
            echo "PKG_NAME=lycrex-auth" >> $GITHUB_ENV
          else
            echo "错误: 无法找到可执行文件"
            exit 1
          fi
        fi
    
    - name: 检查服务器配置
      run: |
        if [ -z "${{ vars.SERVER_HOST }}" ] || [ -z "${{ secrets.SERVER_USERNAME }}" ] || 
           [ -z "${{ vars.DEPLOY_PATH }}" ] || [ -z "${{ vars.SERVICE_NAME }}" ]; then
          echo "错误: 缺少必要的服务器配置"
          exit 1
        fi
      
    - name: 准备部署文件
      run: |
        mkdir -p deploy
        
        # 复制主应用程序
        cp target/release/${PKG_NAME} deploy/
        chmod +x deploy/${PKG_NAME}
        
        # 复制必要目录
        for dir in config migrations db scripts; do
          if [ -d "$dir" ]; then
            cp -r $dir deploy/
            [ "$dir" = "scripts" ] && chmod +x deploy/scripts/*.sh
          fi
        done
        
        # 处理静态文件
        if [ -d "src/static" ]; then
          mkdir -p deploy/static
          cp -r src/static/* deploy/static/
        else
          mkdir -p deploy/static
        fi
        
        touch deploy/.env
    
    - name: 部署到服务器
      uses: appleboy/ssh-action@master
      with:
        host: ${{ vars.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ vars.SERVER_PORT || 22 }}
        script: |
          sudo systemctl stop ${{ vars.SERVICE_NAME }} || echo "服务未运行"
          
          # 备份配置
          [ -f "${{ vars.DEPLOY_PATH }}/.env" ] && mkdir -p /tmp/backup && cp ${{ vars.DEPLOY_PATH }}/.env /tmp/backup/
          
          # 清空并准备目录
          mkdir -p ${{ vars.DEPLOY_PATH }}
          rm -rf ${{ vars.DEPLOY_PATH }}/*
          
          # 恢复配置
          [ -f "/tmp/backup/.env" ] && cp /tmp/backup/.env ${{ vars.DEPLOY_PATH }}/ && rm -rf /tmp/backup
    
    - name: 上传部署文件
      uses: appleboy/scp-action@master
      with:
        host: ${{ vars.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ vars.SERVER_PORT || 22 }}
        source: "deploy/*"
        target: "${{ vars.DEPLOY_PATH }}"
        strip_components: 1
        
    - name: 准备服务器环境
      uses: appleboy/ssh-action@master
      with:
        host: ${{ vars.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ vars.SERVER_PORT || 22 }}
        script: |
          # 安装依赖
          sudo yum install -y gcc make perl pcre-devel zlib-devel wget postgresql-libs
          
          # 安装OpenSSL 3.0
          cd /tmp
          if [ ! -f openssl-3.0.8.tar.gz ]; then
            wget https://www.openssl.org/source/openssl-3.0.8.tar.gz
            tar -zxf openssl-3.0.8.tar.gz
          fi
          
          if [ -d openssl-3.0.8 ]; then
            cd openssl-3.0.8
            ./config --prefix=/usr/local/openssl-3.0 --openssldir=/usr/local/openssl-3.0 shared
            make -j$(nproc)
            sudo make install
            
            # 设置库文件链接
            LIBSSL_PATH=$(find /usr/local/openssl-3.0 -name "libssl.so.3" | head -n 1)
            LIBCRYPTO_PATH=$(find /usr/local/openssl-3.0 -name "libcrypto.so.3" | head -n 1)
            
            if [ -n "$LIBSSL_PATH" ] && [ -n "$LIBCRYPTO_PATH" ]; then
              sudo ln -sf $LIBSSL_PATH /usr/lib64/libssl.so.3
              sudo ln -sf $LIBCRYPTO_PATH /usr/lib64/libcrypto.so.3
              sudo ldconfig
            else
              # 备选方案
              sudo yum install -y epel-release openssl11 openssl11-devel
              [ -f /usr/lib64/libssl.so.1.1 ] && sudo ln -sf /usr/lib64/libssl.so.1.1 /usr/lib64/libssl.so.3
              [ -f /usr/lib64/libcrypto.so.1.1 ] && sudo ln -sf /usr/lib64/libcrypto.so.1.1 /usr/lib64/libcrypto.so.3
              sudo ldconfig
            fi
          fi
          
          # 设置环境变量
          echo "export LD_LIBRARY_PATH=/usr/local/openssl-3.0/lib64:/usr/local/openssl-3.0/lib:\$LD_LIBRARY_PATH" | sudo tee /etc/profile.d/openssl3.sh
          sudo chmod +x /etc/profile.d/openssl3.sh
          
          # 更新服务配置
          [ -f /etc/systemd/system/${{ vars.SERVICE_NAME }}.service ] && sudo sed -i '/^\[Service\]/a Environment="LD_LIBRARY_PATH=/usr/local/openssl-3.0/lib64:/usr/local/openssl-3.0/lib"' /etc/systemd/system/${{ vars.SERVICE_NAME }}.service && sudo systemctl daemon-reload
          
    - name: 配置服务
      uses: appleboy/ssh-action@master
      with:
        host: ${{ vars.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ vars.SERVER_PORT || 22 }}
        script: |
          chmod +x ${{ vars.DEPLOY_PATH }}/${{ env.PKG_NAME }}
          
          # 初始化数据库
          if [ -f "${{ vars.DEPLOY_PATH }}/scripts/init_db.sh" ]; then
            cd ${{ vars.DEPLOY_PATH }}
            export RUN_ENV="production"
            export POSTGRES_USER="${{ secrets.DB_USER || secrets.SERVER_USERNAME }}"
            export POSTGRES_PASSWORD="${{ secrets.DB_PASSWORD }}"
            export POSTGRES_HOST="${{ secrets.DB_HOST || 'localhost' }}"
            export POSTGRES_PORT="${{ secrets.DB_PORT || '5432' }}"
            export DB_NAME="${{ vars.DB_NAME || 'lycrex_auth' }}"
            
            bash scripts/init_db.sh || echo "数据库初始化可能已完成或出现错误"
          fi
          
          # 创建服务配置
          if ! sudo test -f /etc/systemd/system/${{ vars.SERVICE_NAME }}.service; then
            cat << EOF | sudo tee /etc/systemd/system/${{ vars.SERVICE_NAME }}.service
          [Unit]
          Description=Lycrex Auth Service
          After=network.target
          
          [Service]
          Type=simple
          User=${{ secrets.SERVER_USERNAME }}
          WorkingDirectory=${{ vars.DEPLOY_PATH }}
          ExecStart=${{ vars.DEPLOY_PATH }}/${{ env.PKG_NAME }}
          Restart=always
          RestartSec=5
          StandardOutput=journal
          StandardError=journal
          Environment="RUST_LOG=info,sqlx=off,sqlx::query=off"
          Environment="LD_LIBRARY_PATH=/usr/local/openssl-3.0/lib64:/usr/local/openssl-3.0/lib"
          Environment="RUN_ENV=production"
          Environment="POSTGRES_USER=${{ secrets.DB_USER || secrets.SERVER_USERNAME }}"
          Environment="POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}"
          Environment="POSTGRES_HOST=${{ secrets.DB_HOST || 'localhost' }}"
          Environment="POSTGRES_PORT="${{ secrets.DB_PORT || '5432' }}"
          Environment="DB_NAME=${{ vars.DB_NAME || 'lycrex_auth' }}"
          
          [Install]
          WantedBy=multi-user.target
          EOF
            
            sudo systemctl daemon-reload
          fi
          
          # 启动服务但不检查状态
          sudo systemctl enable ${{ vars.SERVICE_NAME }}
          sudo systemctl start ${{ vars.SERVICE_NAME }} || echo "服务启动命令已执行"
          echo "Lycrex Auth Service 部署完成" 